{"version":3,"sources":["Clock.js","NextWater.js","WaterDuration.js","TimeBetweenWater.js","WaterTimes.js","FlowRate.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","time","moment","format","this","intervalID","setInterval","tick","clearInterval","setState","className","React","Component","NextWater","nextWaterMoment","nextWaterOutput","timeTill","axios","get","then","response","data","unix","nextWater","fromNow","WaterDuration","duration","timeSeconds","console","log","TimeBetweenWater","timeMin","calcDuration","returnString","hours","Math","floor","minLeft","length","WaterTimes","startTime","endTime","start","end","calcFull","calcTime","FlowRate","flow","rate","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.838c3f3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: moment().format('MMMM Do YYYY, h:mm a')\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n    \r\n    tick() {\r\n        this.setState({\r\n            time: moment().format('MMMM Do YYYY, h:mm a')\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <h2 className=\"App-clock\">\r\n                {this.state.time}\r\n            </h2>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nclass NextWater extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            nextWaterMoment: \"\",\r\n            nextWaterOutput: \"\",\r\n            timeTill: \"\"\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Next-water\">\r\n                <h2>Next Water Time:</h2>\r\n                <h3> {this.state.nextWaterOutput} {this.state.timeTill}</h3>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('http://127.0.0.1:5000/nextWater').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ \r\n                    nextWaterMoment: moment.unix(data.nextWater)\r\n                })\r\n            })\r\n            .then(() => {\r\n                this.setState({\r\n                    nextWaterOutput: this.state.nextWaterMoment.format('MMMM, h:mm:ss a'),\r\n                    timeTill: this.state.nextWaterMoment.fromNow()\r\n                })\r\n            })\r\n            \r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n    \r\n    tick() {\r\n        this.setState({\r\n            timeTill: this.state.nextWaterMoment.fromNow()\r\n        });\r\n    }\r\n}\r\n\r\nexport default NextWater;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass WaterDuration extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            duration: 0\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('http://127.0.0.1:5000/wateringDuration').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ duration: data.timeSeconds })\r\n                console.log(this.state.duration)\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App-water-duration\">\r\n                <h2>Watering Duration</h2>\r\n                <h3>\r\n                    {this.state.duration} seconds\r\n                </h3>\r\n                <button>Change</button>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default WaterDuration;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass TimeBetweenWater extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            duration: 0\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('http://127.0.0.1:5000/wateringDelay').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ duration: data.timeMin })\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Time-between-water\">\r\n                <h2>Time Between Watering</h2>\r\n                {this.calcDuration(this.state.duration)}\r\n                <button>Change</button>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    // time in min, convert for hours and min\r\n    calcDuration(time) {\r\n        var returnString = \"\";\r\n        var hours = Math.floor(time/60);\r\n        if (hours > 0){\r\n            returnString = hours;\r\n            if (hours > 1) {\r\n                returnString += \" hours\";\r\n            }\r\n            else {\r\n                returnString += \" hour\";\r\n            }\r\n        }\r\n        var minLeft = time - (hours * 60);\r\n        if (minLeft > 0) {\r\n            if (returnString.length > 0) {\r\n                returnString += \" \"\r\n            }\r\n            returnString += minLeft;\r\n            if (minLeft > 1) {\r\n                returnString += \" minutes\";\r\n            }\r\n            else {\r\n                returnString += \" minute\";\r\n            }\r\n        }\r\n        \r\n        return <h3> {returnString} </h3>\r\n    }\r\n}\r\n\r\nexport default TimeBetweenWater;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass WaterTimes extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            startTime: \"\",\r\n            endTime: \"\"\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('http://127.0.0.1:5000/getWaterTimes').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ \r\n                    startTime: data.start,\r\n                    endTime: data.end\r\n                })\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Water-times\">\r\n                <h2>Watering Times:</h2>\r\n                <h3> {this.calcFull(this.state.startTime, this.state.endTime)} </h3>\r\n                <button>Change</button>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    calcFull(start, end) {\r\n        if (end == 1440) {\r\n            end = 0;\r\n        }\r\n        if (start == end) {\r\n            return \"All day\";\r\n        }\r\n        \r\n        var returnString = this.calcTime(start);\r\n        return returnString + \" - \" + this.calcTime(end);\r\n    }\r\n    \r\n    // time in min, convert to time 24H\r\n    calcTime(time) {\r\n        var returnString = \"\";\r\n        var hours = Math.floor(time/60);\r\n        if (hours > 0){\r\n            returnString = hours + \":\";\r\n        }\r\n        var minLeft = time - (hours * 60);\r\n        if (hours == 0) {\r\n            returnString += \"00:\"\r\n        }\r\n        if (minLeft < 10){\r\n            returnString += \"0\"\r\n        }\r\n        returnString += minLeft;\r\n        \r\n        return returnString\r\n    }\r\n}\r\n\r\nexport default WaterTimes;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass FlowRate extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            flow: \"\"\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Next-water\">\r\n                <h2>Flow Rate:</h2>\r\n                <h3> {this.state.flow} </h3>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('http://127.0.0.1:5000/flowRate').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ \r\n                    flow: data.rate\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport default FlowRate;","import React from 'react';\n//import logo from './logo.svg';\nimport Clock from './Clock';\nimport NextWater from './NextWater';\nimport WaterDuration from './WaterDuration';\nimport TimeBetweenWater from './TimeBetweenWater';\nimport WaterTimes from './WaterTimes';\nimport FlowRate from './FlowRate';\nimport './App.css';\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n      // <header className=\"App-header\">\n        // <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        // <p>\n          // Edit <code>src/App.js</code> and save to reload.\n        // </p>\n        // <a\n          // className=\"App-link\"\n          // href=\"https://reactjs.org\"\n          // target=\"_blank\"\n          // rel=\"noopener noreferrer\"\n        // >\n          // Learn React\n        // </a>\n      // </header>\n    // </div>\n    <div className=\"App\">\n                <h1>Irrigation System</h1>\n                <Clock></Clock>\n                \n                <button>Manually Water</button>\n                \n                <NextWater></NextWater>\n                \n                <WaterTimes></WaterTimes>\n                \n                <TimeBetweenWater></TimeBetweenWater>\n                \n                <WaterDuration></WaterDuration>\n                \n                <FlowRate></FlowRate>\n            </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}